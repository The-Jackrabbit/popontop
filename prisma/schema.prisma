generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  uuid          String?         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  accounts      Account[]
  sessions      Session[]
  chart_to_user chart_to_user[]
}

model Album {
  id             BigInt           @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  release_date   DateTime?        @db.Date
  name           String?          @db.VarChar
  uuid           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  artist         String?          @db.VarChar
  chart_id       String?          @db.Uuid
  album_art_url  String?          @db.VarChar
  index          Int?             @db.SmallInt
  Chart          Chart?           @relation(fields: [chart_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  album_to_chart album_to_chart[]
}

model Chart {
  id             BigInt           @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  name           String           @default("") @db.VarChar
  uuid           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Album          Album[]
  ChartSettings  ChartSettings?
  album_to_chart album_to_chart[]
  chart_to_user  chart_to_user[]
}

model ChartSettings {
  chart_id               String?  @unique @db.Uuid
  uuid                   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  background_color       String?
  border_color           String?
  border_size            Int?     @db.SmallInt
  show_albums            Boolean?
  show_title             Boolean?
  text_color             String?
  number_of_albums       Int?     @db.SmallInt
  title_background_color String?
  chart_format           String?  @default("honeycomb")
  title_text_color       String?
  Chart                  Chart?   @relation(fields: [chart_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
}

model chart_to_user {
  chart_id String? @db.Uuid
  user_id  String?
  uuid     String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Chart    Chart?  @relation(fields: [chart_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  User     User?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model album_to_chart {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  chart_id   String   @db.Uuid
  album_id   String   @db.Uuid
  index      Int      @db.SmallInt
  Album      Album    @relation(fields: [album_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  Chart      Chart    @relation(fields: [chart_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
}
