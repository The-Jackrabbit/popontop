generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id             BigInt           @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  release_date   DateTime?        @db.Date
  name           String?          @db.VarChar
  uuid           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  artist         String?          @db.VarChar
  chart_id       String?          @db.Uuid
  album_art_url  String?          @db.VarChar
  Chart          Chart?           @relation(fields: [chart_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  album_to_chart album_to_chart[]
}

model Artist {
  id         BigInt    @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String?   @db.VarChar
  uuid       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
}

model Chart {
  id             BigInt           @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  name           String           @default("") @db.VarChar
  uuid           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Album          Album[]
  album_to_chart album_to_chart[]
}

model Song {
  id         BigInt    @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String?   @db.VarChar
  duration   Decimal?  @default(0) @db.Decimal
  uuid       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  album_id   String?   @db.Uuid
  artist_id  String?   @db.Uuid
}

model album_to_chart {
  id         BigInt    @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  album_id   String    @db.Uuid
  chart_id   String?   @db.Uuid
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  uuid       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Album      Album     @relation(fields: [album_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  Chart      Chart?    @relation(fields: [chart_id], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
}
